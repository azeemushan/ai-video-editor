import Head from 'next/head';
import { NextPageWithLayout } from 'types';
import { useTranslation } from 'next-i18next';
import { GetServerSidePropsContext } from 'next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { useRouter } from 'next/router';
import { getVideoById } from 'models/uploadedVideo';
import React, { useEffect, useReducer, useRef, useState } from 'react';
import ReactPlayer from 'react-player';
import axios from 'axios';

const FetchingVideo: NextPageWithLayout = ({
  originalLink,
  conVideoId,
}: any) => {
  const { t } = useTranslation('common');
  const router = useRouter();
  const { id } = router.query;
  const [videoData, setVideoData] = useState<any>(null);
  const [dbVideoObj, setDbVideoObj] = useState<any>(null);
  const [clips, setClips] = useState<any[]>([]);
  const [exportClips, setExportClips] = useState<any[]>([]);
  const [readyItems, setReadyItems] = useState<any[]>([]); // Initialize readyItems state
  const isInitialMount = useRef(false);




  

  const apiKey = 'kak_98a8c6d5e822-405c-aad9-b1a25815a8be';
  const baseURL = 'https://v1.api.klap.app/v1';

  const handleCreateClips = async () => {
    try {
      const videoResponse = await axios.post(
        `${baseURL}/videos`,
        {
          source_video_url: originalLink,
          language: 'en',
          min_duration: 10,
          max_duration: 60,
          target_duration: 30,
        },
        {
          headers: {
            Authorization: `Bearer ${apiKey}`,
          },
        }
      );

      const videoData = videoResponse.data;

      // updated conVideoId filed
      const conVideoUpatedResponse = await axios.put('/api/video/UploadVideo', {
        conVideoId: videoData.id,
        videoId: id,
      });
      const { message } = conVideoUpatedResponse.data;
      setDbVideoObj(conVideoUpatedResponse.data.data);
      alert(message);

      // updated conVideoId filed
      // const clipsResponse = await axios.get(
      //   `${baseURL}/videos/${videoData.id}/clips`,
      //   {
      //     headers: {
      //       Authorization: `Bearer ${apiKey}`,
      //     },
      //   }
      // );

      // const clipsData = clipsResponse.data;

      setVideoData(videoData);

      localStorage.setItem('videoData', JSON.stringify(videoData));

      // const clipsResponse = await axios.get(
      //   `${baseURL}/videos/${videoData.id}/clips`,
      //   {
      //     headers: {
      //       Authorization: `Bearer ${apiKey}`,
      //     },
      //   }
      // );

      // const clipsData = clipsResponse.data;
      // setClips(clipsData);
      // localStorage.setItem('clipsData', JSON.stringify(clipsData));
    } catch (error) {
      console.error('Error creating video or fetching clips:', error);
    }
  };

  useEffect(() => {
    if (videoData) {
      console.log('Video Data use effect : -----------:', videoData);
      localStorage.setItem('videoData', JSON.stringify(videoData));
    }
    if (clips.length > 0) {
      console.log('Clips Data:', clips);
    }
  }, [videoData, clips]);

  // useEffect( ()=>{
  //   // preset_id:"492856e0-fddd-4fed-9c60-2bd256115baf",
  //     axios.get(
  //       `${baseURL}/videos/68ce3401-888b-451b-b8f8-cccd0e2eb82f/clips/873a2ffc-69b6-47ac-8e84-8b18aa92d2d7/exports/fa87b6f7-fbaa-48ed-8031-42fa4b85d7ea`,
  //       {

  //         headers: {
  //           Authorization: `Bearer ${apiKey}`,
  //         },
  //       }
  //     ).then((res)=>{
  //       console.log(`from use effect `)
  //       console.log(res.data)

  //     })

  // },[])

  useEffect(() => {
    if (!dbVideoObj) {
      axios
        .post('/api/video/UploadVideo', {
          fetchVideoById: id,
        })
        .then((res) => {
          setDbVideoObj(res.data.data);
        });
    }
  }, [dbVideoObj, id]);

  useEffect(() => {
    if (dbVideoObj) {
      if (dbVideoObj.conVideoId) {
        const interval = setInterval(() => {
          axios
            .get(`${baseURL}/videos/${dbVideoObj.conVideoId}`, {
              headers: {
                Authorization: `Bearer ${apiKey}`,
              },
            })
            .then((res) => {
              console.log(res.data);
              if (res.data.status === 'ready') {
                const { src_url, title } = res.data;
                if (!dbVideoObj.conVideoSrc) {
                  axios
                    .post('/api/video/UploadVideo', {
                      updateConVidSrcById: id,
                      src_url,
                      title,
                    })
                    .then((res) => {
                      console.log(res.data);
                      if (res.data.status === 'true') {
                        alert(res.data.message);
                        setDbVideoObj(res.data.data);
                      }
                    });
                }

                clearInterval(interval);
              }
            });
        }, 10000);
        return () => clearInterval(interval);
      }
    }
  }, [conVideoId, dbVideoObj, id]);

  useEffect(() => {
    if (dbVideoObj && dbVideoObj.conVideoId && dbVideoObj.conVideoSrc) {
      axios
        .get(`${baseURL}/videos/${dbVideoObj.conVideoId}/clips`, {
          headers: {
            Authorization: `Bearer ${apiKey}`,
          },
        })
        .then((res) => {
          res.data.forEach((clip: any, index: any) => {
            axios
              .post(
                `${baseURL}/videos/${clip.video_id}/clips/${clip.id}/exports`,
                {
                  preset_id: clip.preset_id,
                },
                {
                  headers: {
                    Authorization: `Bearer ${apiKey}`,
                  },
                }
              )
              .then((res) => {
                setExportClips((prevExportClips) => [
                  ...prevExportClips,
                  res.data,
                ]);
                
                
              });
          });
          // current
          

          //         axios.post(
          //   `${baseURL}/videos/${res.data[0].video_id}/clips/${res.data[0].id}/exports`,
          //   {
          //     preset_id:res.data[0].preset_id

          //   },
          //   {

          //     headers: {
          //       Authorization: `Bearer ${apiKey}`,
          //     },
          //   }
          // ).then((res)=>{
          //   console.log(`+++++++++++++++++++++++ `)
          //   console.log(res.data)
          //   console.log(`+++++++++++++++++++++++ `)
          // })

          // axios.get(
          //   `${baseURL}/videos/${res.data[0].video_id}/clips/${res.data[0].id}/exports/d6d8369d-3255-437b-b57c-d901b95ee6e6`,

          //   {

          //     headers: {
          //       Authorization: `Bearer ${apiKey}`,
          //     },
          //   }
          // ).then((res)=>{
          //   console.log(`+++++++++++++++++++++++ `)
          //   console.log(res.data)
          //   console.log(`+++++++++++++++++++++++ `)

          // })
        });
    }
  }, [dbVideoObj]);




  

  useEffect(() => {


    if (exportClips.length > 0) {
      

     

    
      
      console.log(exportClips)
      

    
    

      

  //     // const interval = setInterval(() => {
  //       exportClips.forEach((clip) => {
  //           axios
  //               .get(
  //                   `${baseURL}/videos/${clip.video_id}/clips/${clip.clip_id}/exports/${clip.id}`,
  //                   {
  //                       headers: {
  //                           Authorization: `Bearer ${apiKey}`,
  //                       },
  //                   }
  //               )
  //               .then((res) => {
  //                 console.log(`===================-----------==================`)
  //                   console.log(res.data);
  //                 console.log(`===================-----------==================`)


                    
                    
  //               });
  //       });
  //   // }, 10000);

  //   // Clean up the interval when all items are "ready"
  //   // return () => clearInterval(interval);




  }
  }, [ exportClips]);



  // useEffect(()=>{
  //   console.log(`==========-----------================`)
  //   console.log(readyItems)
  //   console.log(`==========-----------================`)


  // },[readyItems])

  return (
    <>
      <Head>
        <title>{`${t('create-clips')}`}</title>
      </Head>
      <div className="flex justify-center">
        <div className="create_clips_section flex gap-4 w-full md:w-3/4">
          <div className="flex-1">
            <ReactPlayer url={originalLink} width="100%" controls={true} />
          </div>
          <div className="flex-1 flex items-end">
            <button
              onClick={handleCreateClips}
              className="bg-blue-500 text-white px-4 py-2 rounded"
            >
              {t('create-clips')}
            </button>
          </div>
        </div>
      </div>
      {clips.length > 0 && (
        <div className="mt-4">
          <h2>{t('clips')}</h2>
          <ul>
            {clips.map((clip) => (
              <li key={clip.id}>{clip.title}</li>
            ))}
          </ul>
        </div>
      )}
    </>
  );
};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const { locale } = context;
  const { id }: any = context.params;

  const { originalLink, conVideoId }: any = await getVideoById(id);

  return {
    props: {
      ...(locale ? await serverSideTranslations(locale, ['common']) : {}),
      originalLink,
      conVideoId,
    },
  };
};

export default FetchingVideo;
